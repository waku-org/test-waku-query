
## Kindly run the docker compose command (`docker compose up`) from the same
## folder as this file.

version: "3.7"

networks:
  simulation:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "10.1.0.0/22"

x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 1000m

# Environment variable definitions
x-pg-pass: &pg_pass ${POSTGRES_PASSWORD:-test123}
x-pg-user: &pg_user ${POSTGRES_USER:-postgres}

x-pg-environment: &pg_env
  environment:
    POSTGRES_USER: *pg_user
    POSTGRES_PASSWORD: *pg_pass
    PGDATA: /var/lib/postgresql/data/pgdata

x-pg-exporter-env: &pg_exp_env
  environment:
    POSTGRES_PASSWORD: *pg_pass
    DATA_SOURCE_URI: postgres?sslmode=disable
    DATA_SOURCE_USER: *pg_user
    DATA_SOURCE_PASS: *pg_pass
    PG_EXPORTER_EXTEND_QUERY_PATH: /etc/pgexporter/queries.yml

services:

  bootstrap:
    image: statusteam/nim-waku:v0.20.0
    restart: on-failure
    ports:
      - 127.0.0.1:60000:60000
      - 127.0.0.1:8008:8008
      - 127.0.0.1:9000:9000
      - 127.0.0.1:8544:8544
    entrypoint: sh
    command:
    - '/opt/run_bootstrap.sh'
    volumes:
      - ./run_bootstrap.sh:/opt/run_bootstrap.sh:Z
    networks:
      - simulation

  nwaku-sqlite:
    ## Waku node with Store mounted & SQLite
    image: ubuntu
    restart: on-failure
    ports:
      - 0.0.0.0:8546:8546
    <<:
      - *logging
    volumes:
      - /home/ivansete/workspace/status/nwaku/build/wakunode2:/usr/bin/wakunode:Z
      - ./data/sqlite:/data
      - ./run_nwaku_store_sqlite_ubuntu.sh:/opt/run_nwaku_store_sqlite.sh:Z
    entrypoint: sh
    command:
      - /opt/run_nwaku_store_sqlite.sh
    networks:
      - simulation

  nwaku-postgres:
    ## Waku node with Store mounted & Postgres
    image: ubuntu
    restart: on-failure
    ports:
      - 0.0.0.0:8545:8545
    <<:
      - *logging
      - *pg_env
    volumes:
    # This is expected to be run from metal-01.he-eu-hel1.wakudev.misc.statusim.net
      - /home/shared/nwaku/build/wakunode2:/usr/bin/wakunode:Z
      - ./run_nwaku_store_postgres_ubuntu.sh:/opt/run_nwaku_store_postgres_ubuntu.sh:Z
    entrypoint: bash
    command:
      - /opt/run_nwaku_store_postgres_ubuntu.sh
    depends_on:
      - postgres
    networks:
      - simulation

  waku-store-query-generator:
    image: ivansete/waku-store-request-maker:19e645
    restart: on-failure
    entrypoint: sh
      - 'opt/run_waku_store_query_maker.sh'
    deploy:
      replicas: 1
    volumes:
      - ./run_waku_store_query_maker.sh:/opt/run_waku_store_query_maker.sh:Z
    environment:
      STORE_QUERIES_PER_SECOND: 1
    networks:
      - simulation

  waku-publisher:
    image: alrevuelta/waku-publisher:9fb206c
    entrypoint: sh
      - 'opt/run_wakupublisher.sh'
    deploy:
      replicas: 1
    volumes:
      - ./run_wakupublisher.sh:/opt/run_wakupublisher.sh:Z
    environment:
      MSG_PER_SECOND: 10
      MSG_SIZE_KBYTES: 10
    depends_on:
      - nwaku-postgres
      - nwaku-sqlite
    networks:
      - simulation

  prometheus:
    image: docker.io/prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml:Z
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    restart: on-failure
    depends_on:
      - postgres-exporter
      - nwaku-postgres
      - nwaku-sqlite
    networks:
      - simulation

  grafana:
    image: docker.io/grafana/grafana:latest
    ports:
      - 0.0.0.0:3000:3000
    env_file:
      - ./monitoring/configuration/grafana-plugins.env
    volumes:
      - ./monitoring/configuration/grafana.ini:/etc/grafana/grafana.ini:Z
      - ./monitoring/configuration/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:Z
      - ./monitoring/configuration/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:Z
      - ./monitoring/configuration/dashboards:/var/lib/grafana/dashboards/:Z
      - ./monitoring/configuration/customizations/custom-logo.svg:/usr/share/grafana/public/img/grafana_icon.svg:Z
      - ./monitoring/configuration/customizations/custom-logo.svg:/usr/share/grafana/public/img/grafana_typelogo.svg:Z
      - ./monitoring/configuration/customizations/custom-logo.png:/usr/share/grafana/public/img/fav32.png:Z
    restart: on-failure
    depends_on:
      - prometheus
    networks:
      - simulation

  postgres:
    # This service is used when the Waku node has the 'store' protocol enabled
    # and the store-message-db-url is set to use Postgres
    image: postgres:15.4-alpine3.18
    restart: on-failure
    ports:
      - 0.0.0.0:5432:5432
    <<: *pg_env
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
      - ./postgres_cfg/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres_cfg/db.sql:/docker-entrypoint-initdb.d/db.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - simulation

  postgres-exporter:
    # Service aimed to scrape information from Postgres and post it to Prometeus
    image: quay.io/prometheuscommunity/postgres-exporter:v0.12.0
    restart: on-failure
    <<: *pg_exp_env
    volumes:
      - ./monitoring/configuration/postgres-exporter.yml:/etc/pgexporter/postgres-exporter.yml
      - ./monitoring/configuration/pg-exporter-queries.yml:/etc/pgexporter/queries.yml
    command:
      # Both the config file and 'DATA_SOURCE_NAME' should contain valid connection info
      - --config.file=/etc/pgexporter/postgres-exporter.yml
    depends_on:
      - postgres
    networks:
      - simulation
